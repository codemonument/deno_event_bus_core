/**
 * When P = void, resulting type MUST be void, otherwise typescript forces the user
 * to input a payload param when instantiating a child class of BusEvent
 */ /**
 * I am the base-class for all of the events that this application pushes onto the
 * EventBus. The only guarantee that this class makes is a read-only property called `type`.
 *
 * This class has been called 'Event' in original Article.
 *
 * It also allows for a payload being passed into into it.
 * Can be disabled when not needed by simply extending like this with `void`:
 *
 * class EventWithoutPayload extends BusEvent<void> {
 *   public type = "EventWithoutPayload";
 * }
 *
 * @type payloadType
 * === generic payload type - small name, bc. it's a variable for a type
 * === "type variable" for the typescript type of the payload incomming into the constructor.
 */ export class BusEvent {
  payload;
  // This property will be filled with the name of the class extending this base
  type;
  constructor(payload){
    this.payload = payload;
    this.type = this.constructor.name;
  }
}
//# sourceMappingURL=bus-event.base.js.map