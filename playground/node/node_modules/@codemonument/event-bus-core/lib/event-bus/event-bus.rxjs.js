import { filter, map, Subject } from "../../deps/npm_rxjs.js";
export class EventBusRxJS {
  eventStream = new Subject();
  // --- PUBLIC FUNCTIONS ---
  /**
   * I filter the event stream to get only events of one type as observable
   * @param typeFilter The event type to listen to
   *        must extend from BusEvent<R>
   *
   * @returns either the Event E or the Payload of E, typed P
   * Note: These types do not be passed manually, they will be inferenced by TS
   */ on$(typeFilter) {
    return this.eventStream.pipe(// Filters all events on the event stream and returns only these, which map the typeFilter
    filter((event)=>{
      return event instanceof typeFilter;
    }), // Maps the events to their payloads for easier consumption
    // Note: The return type must be EventualPayload here
    //       to not get `P | undefined` as return type of this map
    map((event)=>event.payload !== undefined ? event.payload : undefined));
  }
  /**
   * I push the given event onto the message bus.
   *
   * @param event
   */ emit(event) {
    this.eventStream.next(event);
  }
  /**
   * CAUTION: PLEASE BE SURE WHAT YOU DO WHEN YOU USE THIS!
   *
   * Returns the whole eventStream as observable.
   */ get eventStream$() {
    return this.eventStream.asObservable();
  }
}
//# sourceMappingURL=event-bus.rxjs.js.map